#
# This script is intended for a stand-alone rendering of the score
# It is based on an object named 'time' that behaves like a conductor
# 'time' watch time intervals and generates events similar to those generated by Max/MSP 
# 
# The main difference lies in the random aspects of the score: with this version, 
# events are pre-defined and static. And after a while, the score loops to the beginning.
#
# Note that when events are fired, a trace is also generated in the log window
#

#########################################################
# tempo and time unit definitions
tempo = 300;
dunit = 16;

#########################################################
# open and clear the log window
/ITL/log show 1;
/ITL/log clear;

#########################################################
# create the time object
/ITL/scene/time set txt time;
/ITL/scene/time show 0;

#########################################################
# pre-defined events durations
d1 = 200;
d2 = 150;
d3 = 100;
d4 = 50;
d5 = 150;
d6 = 50;
d7 = 50;
d8 = 80;
d9 = 140;
d10 = 80;
d11 = 40;
d12 = 60;

#########################################################
# a user defined MOVE event: takes an event name and a 
# duration as arguments
# It triggers the event but also write the event to the log window
/ITL/scene/time watch MOVE ( /ITL/scene event '$1' '$2', /ITL/log write event '$1' '$2' );

#########################################################
# the time events definitions
t1 = 4;				# the start date (actually a bit after 0)
t2 = $t1 + $d2;		# 't2' represents the time interval right boundary
/ITL/scene/time watch timeEnter $t1 $dunit $t2 $dunit ( /ITL/scene/time event MOVE P13 $d1 );
t1 = $t2;
t2 = $t1 + $d2;
/ITL/scene/time watch timeEnter $t1 $dunit $t2 $dunit (/ITL/scene/time event MOVE P5 $d2 );
t1 = $t2;
t2 = $t1 + $d3;
/ITL/scene/time watch timeEnter $t1 $dunit $t2 $dunit (/ITL/scene/time event MOVE P4 $d3 );
t1 = $t2;
t2 = $t1 + $d4;
/ITL/scene/time watch timeEnter $t1 $dunit $t2 $dunit (/ITL/scene/time event MOVE P7 $d4 );
t1 = $t2;
t2 = $t1 + $d5;
/ITL/scene/time watch timeEnter $t1 $dunit $t2 $dunit (/ITL/scene/time event MOVE P1 $d5 );
t1 = $t2;
t2 = $t1 + $d6;
/ITL/scene/time watch timeEnter $t1 $dunit $t2 $dunit (/ITL/scene/time event MOVE P8 $d6 );
t1 = $t2;
t2 = $t1 + $d7;
/ITL/scene/time watch timeEnter $t1 $dunit $t2 $dunit (/ITL/scene/time event MOVE P4 $d7 );
t1 = $t2;
t2 = $t1 + $d8;
/ITL/scene/time watch timeEnter $t1 $dunit $t2 $dunit (/ITL/scene/time event MOVE P6 $d8 );
t1 = $t2;
t2 = $t1 + $d9;
/ITL/scene/time watch timeEnter $t1 $dunit $t2 $dunit (/ITL/scene/time event MOVE P3 $d9 );
t1 = $t2;
t2 = $t1 + $d10;
/ITL/scene/time watch timeEnter $t1 $dunit $t2 $dunit (/ITL/scene/time event MOVE P2 $d10 );
t1 = $t2;
t2 = $t1 + $d11;
/ITL/scene/time watch timeEnter $t1 $dunit $t2 $dunit (/ITL/scene/time event MOVE P10 $d11 );
t1 = $t2;
t2 = $t1 + $d12;
/ITL/scene/time watch timeEnter $t1 $dunit $t2 $dunit (/ITL/scene/time event MOVE P1 $d12 );

#########################################################
# this is where the whole system loops
t1 = $t2;
t2 = $t1 + 1;
/ITL/scene/time watch timeEnter $t1 $dunit $t2 $dunit (/ITL/scene/time date 0 );

#########################################################
# and finaly active the 'time' tempo (actually start rendering)
/ITL/scene/time  tempo $tempo;

__END__

/ITL/log show 1;
/ITL/log level 2;

/ITL preprocess standalone.inscore;

