
C = 3;
a = 1.0; 

b = ($a, 1, $C);
/A/B TOTO $b;
/A/B titi $b{C=1}; 
/A/B titi $b{C=2,a=(* 2, $C)};
#/A/B y [1.0...2.0]{dur=1s,style=linear,step=0.1};

__END__

1s  /ITL/scene/rect x [-0.5...0.]  {dur=1s,style=linear,step=0.2};
1s  /ITL/scene/rect (x 1), (y 2);

/a/b (set rect (1, 1)), (x 1), (y 2);
/a/b/c (set rect (1, 1)), (x 1), (y 2);

#action = watch (ev1, ev2) ;
#/A $action (ev (/B a 0), (/C b 1)); #,  (ev (/D a 0), (/E b 1));

#/ITL/scene/rect x [0.0...0.5]  { dur=1s, style=linear, step=0.25, end=/ITL/scene event TOTO };

__END__

delay = 330ms;

size	= 0.15;
grey	= 200;
/ITL/scene/ctrl watch SHOW (	
	(				/ITL/scene/c1  (set ellipse $size $size), (x '$(/ITL/scene/pc1 get x)'), (y '$(/ITL/scene/pc1 get y)'), (red 200)),
	($delay 		/ITL/scene/c2  (set ellipse $size $size), (x 0), (y 0), (green 200)),
	((* $delay, 2)	/ITL/scene/c3  (set ellipse $size $size), (x '$(/ITL/scene/pc2 get x)'), (y '$(/ITL/scene/pc2 get y)'), (blue 200)),
	((* $delay, 3)	/ITL/scene/ctrl event HIDE)
);

__END__


dur = 2s;
#			 /ITL/scene/rect x [0.0...0.5]  {dur=$dur,style=linear,step=0.1666};
#$dur 		 /ITL/scene/rect x [0.5...-0.5] {dur=(* $dur, 2),style=linear,step=-0.1};
#(* $dur, 3)  /ITL/scene/rect x [-0.5...0.]  {dur=$dur,style=linear,step=0.2};


__END__

/ITL/scene/* del;
/ITL/scene/r_[n:1...3]
	(set ellipse $w $w 	(* 10ms, $n)),
	(x $randpos	(* 10ms, $n)),
	(y $randpos	(* 10ms, $n)),
	(hsb $h, 0.7, 0.7, 0.5	(* 10ms, $n));

__END__

maxl 	= 10;
width 	= 1.3;
w 		= / $width, $maxl;
offset	= (/ (- $width, $w), 2);
x		= ( * ( % $i, $maxl), $w );
y		= ( * ( / $i, $maxl), $w );

/ITL/scene/* del;

count = ( * 0.2s, $v) /ITL/scene/t_[i:1...10] 
	 ( * 10ms, $i)
	(set txt (+ $i, 1)),
	(x (- $x, $offset)),
	(y (- $y, $offset));

$count{ v=2 };

__END__

1s /ITL/scene/text watch mouseDown (
	(10ms /ITL/scene/text push),
	(20ms /ITL/scene/text set txt "Hi guy"),
	(30ms /ITL/scene/text watch mouseDown (
		(10ms /ITL/scene/text 10ms set txt "Hello world !"),
		(/ITL/scene/text pop)
	))
);

__END__


/ITL parse v2;

/ITL get time;

/ITL/log show 1;
/ITL/log level 2;

/ITL/scene get;

( * 10, math.cos 500ms) /X ;
math.sqrt 500ms /Y ;
(math.pow 2ms, 4) /Z ;

(+ 1s, 1, 500ms) /A x 0;
(- 1s, 1, 500ms) /A x 1;
( * 1s, 2.78) /A x 2;
(/ 1s, 2.78) /A x 3;


(math.max 1s, 1550ms, 200ms, 0.1s ) /MAX x 3;
(math.min 1s, 1550ms, 200ms, 0.01s ) /MIN x 3;

__END__

delay = 100ms;

/toto watch me;
0.5s /titi watch you;
200ms (/tata x 1),
	(/tata y 2),
	(/tata z 3)	
	;

$delay localhost:80/toto stop;
0.2s /a/b[i:1...3] x $i;

/a watch event (
	(1s /a/b x 1),
	(2s /a/b x 2),
	((* 3s, 2) /a/b x 3)
);


__END__

faust 	= 192.168.1.1:5512;
f2		= faust.grame.fr:8000;

$faust/toto start;
localhost:80/toto stop;
$f2/toto continue;



__END__

<? javascript 
	// ceci est du javascript
?>

maxl 	= 10;
width 	= 1.3;
w 		= / $width, $maxl;
offset	= (/ (- $width, $w), 2);
x		= ( * ( % $i, $maxl), $w );
y		= ( * ( / $i, $maxl), $w );

<? javascript 
	// ceci est encore javascript
?>

/ITL/$i/t_[i:1...3] 
	(set txt (+ $i, 1)),
	(x (- $x, $offset)),
	(y (- $y, $offset));

__END__

a = (1, 2, 3, 4, 5, titi, toto);
/A $a;
/A 1 (math.has 1, $a);
/A 10 (math.has 10, $a);
/A titi (math.has titi, $a);

__END__

val = 1;
e = C[i:1...3];
#pos = /w/x x 0;
toto = /A/B/$e x $val $var $i;

$toto{pos=2, var=y};
$toto{val=0, var=1, i=5};

__END__

/a/b[i:1...3] x $i;

b = y;
a = /a/b/$1 x sin $2;

/a/b/$b;

$a{c[i:1...3], 1.};
$a{titi, 0.5};

__END__

last = c;
/a/b/$last (x sin 0.5);

first  = /ITL/scene/toto (x (+ $x, 1)), (y + 2, 5);
second = /ITL/scene/toto (x 1), (y 1);
 
/ITL/scene/toto watch mouseDown (
 	$first,
 	(/ITL/scene/toto watch mouseUp $second)
);

#__END__


+ (/a c x 1), b;
a = 10;
a = * $a, $a;
? 0,
	(/a/b toto  + 5, 8),
	(/a/c x $a);

/a/b (x 1), (y 0);

/a/b[i:1...3] x (- (* $i, 0.5), 0.5);
/Y/D  (> 1, 2) (x 0), (y 1);
__END__

s1 = true;
sample1 = /a/b (/c, (/d /e), /e[1...3]) (x 0), (y 1);

? $s1, $sample1, false;

#/Y/C[1...3] x 1;
#/Y/C[i:1...3] x 1;
#/Y/C[i:a...e] y / $i, 4.;
#/Y/D[i:j:ab...ce] z  $i, $j;
/Y/D[i:j:ab...ce] z + $j, ( * $i, 3 ), $i, 1 ;
/Y/D[i:j:ab...cd] (x - (/ $i, 2.), 0.5), (y - (/ $j, 2.), 0.5 );

__END__

a = 10;
b = + a, $a;
last = false;
var = yes;


XSection = 	/X (/Y/a* (x -1), (y -0.5)), 
			(/Y (b, b) 1),
			(/Y/b  (c, (d e), (f g h))  (x 0), (y 1)),
			(/Y  (x 0), (y 1)),
			(/Y/B),
			(/Y/C[1...3] x 1) ;

? $var, $XSection, /empty ;

test = yes;
a = * $a, $a;
toto = ? (!$test),
	(/a/b toto  + 5, 8),
	(/a/c x $a);

$toto;

? (1, (/Y/C[1...3] x 1), /no);

__END__


/a/$b ("toto truc", 1, $$a2, $b);

#/a/b + 1, 2, 3, 4;
#/a/c - 1, 2, 3, 4;
#/a/d $b;
#
#/a/e + 1, (/ -4, 3.), (* 5, 3);
/a/"max" + (max ab, abc, popo, trucmuche), (min ooooo, rrrr, ttt);
/a/"min" min -5, 3, 2, hello;

? (> 1, 1.1),
(/a[1...3]  first option),
(/b[1...2]  second option);

#__END__

/W/b/c color (255, 255, 255);
/W/b/c ( d, e) text (x, y, z);
/W/b[1...5] x 1;
W/b/c ( d, (f g), (h i j)) (x 0), (y 1);
W/b/c  (d z 0), f g (x 0), (y 1);
W/b/c  d , f g (x 0), (y 1);
/OSC/address watch event (
	(/toto truc 1),
	(/titi chose 2)
);

/a/x* (x -1), (y -0.5);
/a/x* x 1;

__END__
